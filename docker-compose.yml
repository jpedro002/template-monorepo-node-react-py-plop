services:
  frontend:
    container_name: ${FRONTEND_CONTAINER_NAME:-frontend_prod}
    build:
      context: ./front-end
      dockerfile: ${FRONTEND_DOCKERFILE:-Dockerfile}
    env_file:
      - ./front-end/.env
    ports:
      - "${FRONTEND_PORT:-4175}:${FRONTEND_INTERNAL_PORT:-80}"
    restart: always
    

  api:
    container_name: ${API_NODE_CONTAINER_NAME:-api_node_prod}
    build:
      context: ./api-node
      dockerfile: ${API_NODE_DOCKERFILE:-Dockerfile}
    env_file:
      - ./api-node/.env
    ports:
      - "${API_NODE_PORT:-3002}:${API_NODE_INTERNAL_PORT:-3000}"
    restart: always
    depends_on:
      - postgresql
    networks:
      - network_name
    environment:
      - NODE_ENV=${NODE_ENV:-production}

  postgresql:
    container_name: ${DB_CONTAINER_NAME:-postgresql_db}
    image: ${DB_IMAGE:-bitnami/postgresql:latest}
    environment:
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_PORT_NUMBER=${POSTGRESQL_PORT_NUMBER}
    ports:
      - "${POSTGRESQL_HOST_PORT:-5434}:${POSTGRESQL_PORT_NUMBER:-5432}"
    volumes:
      - postgresql_data:/bitnami/postgresql
    networks:
      - network_name

  python:
    container_name: ${API_PYTHON_CONTAINER_NAME:-api_python_prod}
    build:
      context: ./api-python
      dockerfile: ${API_PYTHON_DOCKERFILE:-Dockerfile}
    restart: always
    ports:
      - "${API_PYTHON_PORT:-5002}:${API_PYTHON_INTERNAL_PORT:-5000}"
    environment:
      - FLASK_ENV=${FLASK_ENV:-production}
      - DB_URL=${DB_URL}
    networks:
      - network_name

volumes:
  postgresql_data:
    driver: local

networks:
  network_name:
    driver: bridge