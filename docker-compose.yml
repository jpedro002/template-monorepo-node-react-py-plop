services:
  frontend:
    container_name: ${FRONTEND_CONTAINER_NAME}
    build:
      context: ./front-end
      dockerfile: ${FRONTEND_DOCKERFILE}
      args:
        - VITE_API_URL=${VITE_API_URL}
    expose:
      - "80"
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL}
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    container_name: ${API_NODE_CONTAINER_NAME}
    build:
      context: ./api-node
      dockerfile: ${API_NODE_DOCKERFILE}
    expose:
      - "3000"
    restart: unless-stopped
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - API_PORT=3000
      - CORS_ORIGIN=${CORS_ORIGIN}
      - FIRST_ADMIN_PASSWORD=${FIRST_ADMIN_PASSWORD}
      - PUBLIC_DIR=${PUBLIC_DIR}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - JWT_SECRET=${JWT_SECRET}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  postgresql:
    container_name: ${DB_CONTAINER_NAME}
    image: bitnami/postgresql:16
    environment:
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
      - POSTGRESQL_PORT_NUMBER=${POSTGRESQL_PORT_NUMBER}
      - POSTGRESQL_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
    restart: unless-stopped
    expose:
      - "${POSTGRESQL_PORT_NUMBER}"
    volumes:
      - postgresql_data:/bitnami/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRESQL_USERNAME} -d ${POSTGRESQL_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  python:
    container_name: ${API_PYTHON_CONTAINER_NAME}
    build:
      context: ./api-python
      dockerfile: ${API_PYTHON_DOCKERFILE}
    restart: unless-stopped
    expose:
      - "5000"
    environment:
      - FLASK_ENV=${FLASK_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - PYTHONPATH=/app
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

volumes:
  postgresql_data:
    driver: local