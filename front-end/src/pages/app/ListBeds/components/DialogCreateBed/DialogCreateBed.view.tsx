import { Button } from '@/components/ui/button/button'
import { Checkbox } from '@/components/ui/checkbox'
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogFooter,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from '@/components/ui/dialog'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { PlusCircle } from 'lucide-react'

import { Controller } from 'react-hook-form'
import { DialogCreateBedViewProps } from './types'

export const DialogCreateBedView = (props: DialogCreateBedViewProps) => {
	const {
		register,
		handleSubmit,
		errors,
		open,
		setOpen,
		isAutoGenerated,
		control,
	} = props

	return (
		<div className="mb-6 flex justify-end">
			<Dialog open={open} onOpenChange={setOpen}>
				<DialogTrigger asChild>
					<Button className="flex items-center gap-2">
						<PlusCircle className="h-4 w-4" />
						Criar Novo Leito
					</Button>
				</DialogTrigger>
				<DialogContent className="sm:max-w-[425px]">
					<DialogHeader>
						<DialogTitle>Criar Novo Leito</DialogTitle>
						<DialogDescription>
							Adicione um novo leito ao sistema. VocÃª pode gerar um nome
							automaticamente ou definir manualmente.
						</DialogDescription>
					</DialogHeader>
					<form onSubmit={handleSubmit}>
						<div className="grid gap-4 py-4">
							<div className="flex items-center space-x-2">
								<Controller
									name="autoGenerate"
									control={control}
									render={({ field }) => (
										<Checkbox
											id="auto-generate"
											checked={field.value}
											onCheckedChange={(checked) =>
												field.onChange(checked === true)
											}
										/>
									)}
								/>
								<Label htmlFor="auto-generate">
									Gerar nome automaticamente
								</Label>
							</div>

							{!isAutoGenerated && (
								<div className="grid gap-2">
									<Label htmlFor="new-bed-name">Nome do Leito</Label>
									<Input
										id="new-bed-name"
										placeholder="Ex: 11, 12..."
										{...register('name')}
									/>
									{errors.name && <span>{errors.name.message}</span>}
								</div>
							)}
						</div>
						<DialogFooter className="gap-4 sm:gap-2">
							<Button variant="outline" onClick={() => setOpen(false)}>
								Cancelar
							</Button>
							<Button type="submit">Criar Leito</Button>
						</DialogFooter>
					</form>
				</DialogContent>
			</Dialog>
		</div>
	)
}
