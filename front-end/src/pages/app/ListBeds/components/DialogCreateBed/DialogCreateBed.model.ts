import { useAppDispatch } from '@/store'
import { addBed } from '@/store/slices/bedsSlice'
import { zodResolver } from '@hookform/resolvers/zod'
import { isAxiosError } from 'axios'
import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { toast } from 'sonner'
import { z } from 'zod'
import { useDialogCreateBedModelProps } from './types'

const createBedSchema = z.object({
	name: z.string().optional(),
	autoGenerate: z.boolean(),
})

type CreateBedFormData = z.infer<typeof createBedSchema>

export const useDialogCreateBedModel = ({
	bedsService,
}: useDialogCreateBedModelProps) => {
	const [open, setOpen] = useState(false)

	const dispatch = useAppDispatch()
	const {
		register,
		handleSubmit,
		reset,
		control,
		watch,
		formState: { errors },
	} = useForm<CreateBedFormData>({
		resolver: zodResolver(createBedSchema),
		defaultValues: {
			autoGenerate: false,
		},
	})

	const onSubmit = async (data: CreateBedFormData) => {
		try {
			const newBed = await bedsService.create(data)

			dispatch(
				addBed({
					available: true,
					checkedToday: false,
					id: newBed.id,
					medicalRecordId: '',
					name: newBed.name,
					patientName: '',
					patientProfileId: null,
				}),
			)
			reset()

			toast.success('Leito criado com sucesso')

			setOpen(() => false)
		} catch (error) {
			if (isAxiosError(error)) {
				toast.error(error.response?.data?.message || 'Erro ao criar leito')
			}
			console.error('Erro ao criar leito:', error)
		}
	}

	const isAutoGenerated = watch('autoGenerate')

	return {
		register,
		handleSubmit: handleSubmit(onSubmit),
		errors,
		open,
		setOpen,
		control,
		isAutoGenerated,
	}
}
