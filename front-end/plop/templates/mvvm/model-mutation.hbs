import { useMutation, useQueryClient } from '@tanstack/react-query'

import type { Use{{pascalCase name}}ModelProps } from './types'

export function use{{pascalCase name}}Model({ {{serviceName}} }: Use{{pascalCase name}}ModelProps) {
  const queryClient = useQueryClient()
  
  const {
    mutate,
    isPending,
    isError,
    error,
    isSuccess,
    data,
  } = useMutation<WRITE_RETURN_TYPE, Error, Parameters<typeof {{serviceName}}.{{queryFunction}}>[0]>({
    mutationFn: (params) => {{serviceName}}.{{queryFunction}}(params),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['{{queryKey}}'] })
    },
  })

  return {
    {{queryFunction}}: mutate,
    isPending,
    isError,
    error,
    isSuccess,
    data,
  }
}