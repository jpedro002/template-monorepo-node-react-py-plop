import { {{pascalCase name}}, Create{{pascalCase name}}Dto, Update{{pascalCase name}}Dto, {{pascalCase name}}Filters, Paginated{{pascalCase name}}Response } from './types';
import { I{{pascalCase name}}Service } from './I{{pascalCase name}}Service';
import { api } from '@/lib/axios'

const baseUrl = `/{{kebabCase name}}`;

/**
 * Cria um novo {{name}}
 */
const create = async (data: Create{{pascalCase name}}Dto): Promise<{{pascalCase name}}> => {
  const response = await api.post<{{pascalCase name}}>(baseUrl, data);
  return response.data;
};

/**
 * Obtém um {{name}} por ID
 */
const get = async (id: string): Promise<{{pascalCase name}}> => {
  const response = await api.get<{{pascalCase name}}>(`${baseUrl}/${id}`);
  return response.data;
};

/**
 * Lista todos os {{name}}s sem paginação
 */
const list = async (filters: {{pascalCase name}}Filters = {}): Promise<{{pascalCase name}}[]> => {
  const { term, fields, order } = filters;
  const params = {
    term,
    fields: Array.isArray(fields) ? fields : undefined,
    order
  };

  const response = await api.get<{{pascalCase name}}[]>(baseUrl, { params });
  return response.data;
};

/**
 * Busca {{name}}s com paginação e filtros avançados
 */
const fetch = async (filters: {{pascalCase name}}Filters = {}): Promise<Paginated{{pascalCase name}}Response> => {
  const { term, fields, order, page = 1, pageSize = 20, itens } = filters;
  const params = {
    term,
    fields: Array.isArray(fields) ? fields : undefined,
    order,
    page,
    pageSize,
    itens: Array.isArray(itens) ? itens : undefined
  };

  const response = await api.get<Paginated{{pascalCase name}}Response>(`${baseUrl}/fetch`, { params });
  return response.data;
};

/**
 * Atualiza um {{name}} existente
 */
const update = async (id: string, data: Update{{pascalCase name}}Dto): Promise<{{pascalCase name}}> => {
  const response = await api.put<{{pascalCase name}}>(`${baseUrl}/${id}`, data);
  return response.data;
};

/**
 * Exclui um {{name}} por ID
 */
const deleteById = async (id: string): Promise<void> => {
  await api.delete(`${baseUrl}/${id}`);
};

export const {{camelCase name}}Service: I{{pascalCase name}}Service = {
  create,
  get,
  list,
  fetch,
  update,
  delete: deleteById,
};