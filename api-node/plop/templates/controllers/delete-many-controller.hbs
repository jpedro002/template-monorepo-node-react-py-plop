import { FastifyReply, FastifyRequest } from 'fastify'
import { z } from 'zod'
import { {{pascalCase model}}Repository } from '@/repositories/{{kebabCase model}}-repository'
import { Delete{{pascalCase model}}ManyUseCase } from '@/use-cases/{{kebabCase model}}/delete-{{kebabCase model}}-many-use-case'

export async function delete{{pascalCase model}}ManyController(
  request: FastifyRequest,
  reply: FastifyReply,
) {
  const delete{{pascalCase model}}ManyBodySchema = z.object({
    {{camelCase parentModel}}Id: z.number(),
    {{camelCase relationModel}}Ids: z.array(z.number()).optional(),
  })

  const { {{camelCase parentModel}}Id, {{camelCase relationModel}}Ids } = delete{{pascalCase model}}ManyBodySchema.parse(request.body)

  try {
    const {{camelCase model}}Repository = new {{pascalCase model}}Repository()
    const delete{{pascalCase model}}ManyUseCase = new Delete{{pascalCase model}}ManyUseCase({{camelCase model}}Repository)

    const result = await delete{{pascalCase model}}ManyUseCase.execute({
      {{camelCase parentModel}}Id,
      {{camelCase relationModel}}Ids,
    })

    return reply.status(200).send(result)
  } catch (err) {
    if (err instanceof Error) {
      return reply.status(400).send({ message: err.message })
    }

    throw err
  }
}
